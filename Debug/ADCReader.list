
ADCReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000132c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014c0  080014c0  000114c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014c4  080014c4  000114c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080014c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000070  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000080  20000080  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000908d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015b6  00000000  00000000  000290cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000980  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a8  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003290  00000000  00000000  0002b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f7b  00000000  00000000  0002eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031abb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028d8  00000000  00000000  00031b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800149c 	.word	0x0800149c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800149c 	.word	0x0800149c

080001c8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80001e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001ea:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001f6:	4313      	orrs	r3, r2
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <ADC_Init+0xa8>)
 800020e:	4013      	ands	r3, r2
 8000210:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800021a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000220:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	795b      	ldrb	r3, [r3, #5]
 8000226:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000228:	4313      	orrs	r3, r2
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4313      	orrs	r3, r2
 800022e:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800023a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000242:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	7d1b      	ldrb	r3, [r3, #20]
 8000248:	3b01      	subs	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4313      	orrs	r3, r2
 8000250:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000252:	7afb      	ldrb	r3, [r7, #11]
 8000254:	051b      	lsls	r3, r3, #20
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	c0fff7fd 	.word	0xc0fff7fd

08000274 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000280:	78fb      	ldrb	r3, [r7, #3]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d006      	beq.n	8000294 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	f043 0201 	orr.w	r2, r3, #1
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000292:	e005      	b.n	80002a0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	f023 0201 	bic.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	609a      	str	r2, [r3, #8]
}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	4608      	mov	r0, r1
 80002b6:	4611      	mov	r1, r2
 80002b8:	461a      	mov	r2, r3
 80002ba:	4603      	mov	r3, r0
 80002bc:	70fb      	strb	r3, [r7, #3]
 80002be:	460b      	mov	r3, r1
 80002c0:	70bb      	strb	r3, [r7, #2]
 80002c2:	4613      	mov	r3, r2
 80002c4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80002ce:	78fb      	ldrb	r3, [r7, #3]
 80002d0:	2b09      	cmp	r3, #9
 80002d2:	d923      	bls.n	800031c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80002da:	78fb      	ldrb	r3, [r7, #3]
 80002dc:	f1a3 020a 	sub.w	r2, r3, #10
 80002e0:	4613      	mov	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	4413      	add	r3, r2
 80002e6:	2207      	movs	r2, #7
 80002e8:	fa02 f303 	lsl.w	r3, r2, r3
 80002ec:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	43db      	mvns	r3, r3
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4013      	ands	r3, r2
 80002f6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80002f8:	7879      	ldrb	r1, [r7, #1]
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	f1a3 020a 	sub.w	r2, r3, #10
 8000300:	4613      	mov	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	4413      	add	r3, r2
 8000306:	fa01 f303 	lsl.w	r3, r1, r3
 800030a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	4313      	orrs	r3, r2
 8000312:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	e01e      	b.n	800035a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000322:	78fa      	ldrb	r2, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	4413      	add	r3, r2
 800032a:	2207      	movs	r2, #7
 800032c:	fa02 f303 	lsl.w	r3, r2, r3
 8000330:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	43db      	mvns	r3, r3
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	4013      	ands	r3, r2
 800033a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800033c:	7879      	ldrb	r1, [r7, #1]
 800033e:	78fa      	ldrb	r2, [r7, #3]
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	4313      	orrs	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800035a:	78bb      	ldrb	r3, [r7, #2]
 800035c:	2b06      	cmp	r3, #6
 800035e:	d821      	bhi.n	80003a4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000364:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	221f      	movs	r2, #31
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	43db      	mvns	r3, r3
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	4013      	ands	r3, r2
 8000380:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000382:	78f9      	ldrb	r1, [r7, #3]
 8000384:	78bb      	ldrb	r3, [r7, #2]
 8000386:	1e5a      	subs	r2, r3, #1
 8000388:	4613      	mov	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	4413      	add	r3, r2
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	4313      	orrs	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	68fa      	ldr	r2, [r7, #12]
 80003a0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003a2:	e047      	b.n	8000434 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80003a4:	78bb      	ldrb	r3, [r7, #2]
 80003a6:	2b0c      	cmp	r3, #12
 80003a8:	d821      	bhi.n	80003ee <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80003b0:	78bb      	ldrb	r3, [r7, #2]
 80003b2:	1fda      	subs	r2, r3, #7
 80003b4:	4613      	mov	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	221f      	movs	r2, #31
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	43db      	mvns	r3, r3
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	4013      	ands	r3, r2
 80003ca:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80003cc:	78f9      	ldrb	r1, [r7, #3]
 80003ce:	78bb      	ldrb	r3, [r7, #2]
 80003d0:	1fda      	subs	r2, r3, #7
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	68fa      	ldr	r2, [r7, #12]
 80003ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80003ec:	e022      	b.n	8000434 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80003f4:	78bb      	ldrb	r3, [r7, #2]
 80003f6:	f1a3 020d 	sub.w	r2, r3, #13
 80003fa:	4613      	mov	r3, r2
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	221f      	movs	r2, #31
 8000402:	fa02 f303 	lsl.w	r3, r2, r3
 8000406:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	43db      	mvns	r3, r3
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4013      	ands	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000412:	78f9      	ldrb	r1, [r7, #3]
 8000414:	78bb      	ldrb	r3, [r7, #2]
 8000416:	f1a3 020d 	sub.w	r2, r3, #13
 800041a:	4613      	mov	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	4413      	add	r3, r2
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	4313      	orrs	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	609a      	str	r2, [r3, #8]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046c:	b29b      	uxth	r3, r3
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 800047a:	b480      	push	{r7}
 800047c:	b085      	sub	sp, #20
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	807b      	strh	r3, [r7, #2]
 8000486:	4613      	mov	r3, r2
 8000488:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 800048e:	887b      	ldrh	r3, [r7, #2]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000494:	2201      	movs	r2, #1
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 800049e:	787b      	ldrb	r3, [r7, #1]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d006      	beq.n	80004b2 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	431a      	orrs	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80004b0:	e006      	b.n	80004c0 <ADC_ITConfig+0x46>
    ADCx->CR1 &= (~(uint32_t)itmask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685a      	ldr	r2, [r3, #4]
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	43db      	mvns	r3, r3
 80004ba:	401a      	ands	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	605a      	str	r2, [r3, #4]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	4013      	ands	r3, r2
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e001      	b.n	80004f2 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000500:	b480      	push	{r7}
 8000502:	b087      	sub	sp, #28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e076      	b.n	800060a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800051c:	2201      	movs	r2, #1
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d165      	bne.n	8000604 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	2103      	movs	r1, #3
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	401a      	ands	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	4619      	mov	r1, r3
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d003      	beq.n	8000576 <GPIO_Init+0x76>
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d12e      	bne.n	80005d4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	689a      	ldr	r2, [r3, #8]
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	401a      	ands	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	4619      	mov	r1, r3
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	2301      	movs	r3, #1
 80005b0:	408b      	lsls	r3, r1
 80005b2:	43db      	mvns	r3, r3
 80005b4:	401a      	ands	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	7992      	ldrb	r2, [r2, #6]
 80005c2:	4611      	mov	r1, r2
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	b292      	uxth	r2, r2
 80005c8:	fa01 f202 	lsl.w	r2, r1, r2
 80005cc:	b292      	uxth	r2, r2
 80005ce:	431a      	orrs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68da      	ldr	r2, [r3, #12]
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	2103      	movs	r1, #3
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	401a      	ands	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68da      	ldr	r2, [r3, #12]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	79db      	ldrb	r3, [r3, #7]
 80005f4:	4619      	mov	r1, r3
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3301      	adds	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d985      	bls.n	800051c <GPIO_Init+0x1c>
    }
  }
}
 8000610:	bf00      	nop
 8000612:	371c      	adds	r7, #28
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	807b      	strh	r3, [r7, #2]
 8000628:	4613      	mov	r3, r2
 800062a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000634:	787a      	ldrb	r2, [r7, #1]
 8000636:	887b      	ldrh	r3, [r7, #2]
 8000638:	f003 0307 	and.w	r3, r3, #7
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000644:	887b      	ldrh	r3, [r7, #2]
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	b29b      	uxth	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	887b      	ldrh	r3, [r7, #2]
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	b29b      	uxth	r3, r3
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3208      	adds	r2, #8
 8000658:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	210f      	movs	r1, #15
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	ea02 0103 	and.w	r1, r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f100 0208 	add.w	r2, r0, #8
 8000676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	b29b      	uxth	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3208      	adds	r2, #8
 8000686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4313      	orrs	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	b29b      	uxth	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3208      	adds	r2, #8
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	2302      	movs	r3, #2
 80006ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006d0:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f003 030c 	and.w	r3, r3, #12
 80006d8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d007      	beq.n	80006f0 <RCC_GetClocksFreq+0x40>
 80006e0:	2b08      	cmp	r3, #8
 80006e2:	d009      	beq.n	80006f8 <RCC_GetClocksFreq+0x48>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d13d      	bne.n	8000764 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a42      	ldr	r2, [pc, #264]	; (80007f4 <RCC_GetClocksFreq+0x144>)
 80006ec:	601a      	str	r2, [r3, #0]
      break;
 80006ee:	e03d      	b.n	800076c <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a41      	ldr	r2, [pc, #260]	; (80007f8 <RCC_GetClocksFreq+0x148>)
 80006f4:	601a      	str	r2, [r3, #0]
      break;
 80006f6:	e039      	b.n	800076c <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	0d9b      	lsrs	r3, r3, #22
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000704:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800070c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00c      	beq.n	800072e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000714:	4a38      	ldr	r2, [pc, #224]	; (80007f8 <RCC_GetClocksFreq+0x148>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	4a34      	ldr	r2, [pc, #208]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 800071e:	6852      	ldr	r2, [r2, #4]
 8000720:	0992      	lsrs	r2, r2, #6
 8000722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000726:	fb02 f303 	mul.w	r3, r2, r3
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	e00b      	b.n	8000746 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800072e:	4a31      	ldr	r2, [pc, #196]	; (80007f4 <RCC_GetClocksFreq+0x144>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4a2e      	ldr	r2, [pc, #184]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 8000738:	6852      	ldr	r2, [r2, #4]
 800073a:	0992      	lsrs	r2, r2, #6
 800073c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000740:	fb02 f303 	mul.w	r3, r2, r3
 8000744:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	3301      	adds	r3, #1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000756:	69fa      	ldr	r2, [r7, #28]
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	fbb2 f2f3 	udiv	r2, r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
      break;
 8000762:	e003      	b.n	800076c <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <RCC_GetClocksFreq+0x144>)
 8000768:	601a      	str	r2, [r3, #0]
      break;
 800076a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000774:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	091b      	lsrs	r3, r3, #4
 800077a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800077c:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <RCC_GetClocksFreq+0x14c>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	40da      	lsrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800079c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	0a9b      	lsrs	r3, r3, #10
 80007a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007a4:	4a15      	ldr	r2, [pc, #84]	; (80007fc <RCC_GetClocksFreq+0x14c>)
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	40da      	lsrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <RCC_GetClocksFreq+0x140>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007c4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	0b5b      	lsrs	r3, r3, #13
 80007ca:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007cc:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <RCC_GetClocksFreq+0x14c>)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	40da      	lsrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60da      	str	r2, [r3, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3724      	adds	r7, #36	; 0x24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800
 80007f4:	00f42400 	.word	0x00f42400
 80007f8:	007a1200 	.word	0x007a1200
 80007fc:	20000000 	.word	0x20000000

08000800 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000812:	490a      	ldr	r1, [pc, #40]	; (800083c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800081e:	e006      	b.n	800082e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	43db      	mvns	r3, r3
 800082a:	4013      	ands	r3, r2
 800082c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000852:	490a      	ldr	r1, [pc, #40]	; (800087c <RCC_APB1PeriphClockCmd+0x3c>)
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <RCC_APB1PeriphClockCmd+0x3c>)
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4313      	orrs	r3, r2
 800085c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800085e:	e006      	b.n	800086e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <RCC_APB1PeriphClockCmd+0x3c>)
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <RCC_APB1PeriphClockCmd+0x3c>)
 8000864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	43db      	mvns	r3, r3
 800086a:	4013      	ands	r3, r2
 800086c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000892:	490a      	ldr	r1, [pc, #40]	; (80008bc <RCC_APB2PeriphClockCmd+0x3c>)
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <RCC_APB2PeriphClockCmd+0x3c>)
 8000896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4313      	orrs	r3, r2
 800089c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800089e:	e006      	b.n	80008ae <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <RCC_APB2PeriphClockCmd+0x3c>)
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <RCC_APB2PeriphClockCmd+0x3c>)
 80008a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4013      	ands	r3, r2
 80008ac:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d008      	beq.n	80008e4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	b29a      	uxth	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80008e2:	e007      	b.n	80008f4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	801a      	strh	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	8a1b      	ldrh	r3, [r3, #16]
 800091e:	b29b      	uxth	r3, r3
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	88db      	ldrh	r3, [r3, #6]
 800092e:	461a      	mov	r2, r3
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	4313      	orrs	r3, r2
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	b29a      	uxth	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	899b      	ldrh	r3, [r3, #12]
 8000942:	b29b      	uxth	r3, r3
 8000944:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800094c:	f023 030c 	bic.w	r3, r3, #12
 8000950:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	889a      	ldrh	r2, [r3, #4]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	891b      	ldrh	r3, [r3, #8]
 800095a:	4313      	orrs	r3, r2
 800095c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000962:	4313      	orrs	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	4313      	orrs	r3, r2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	8a9b      	ldrh	r3, [r3, #20]
 800097a:	b29b      	uxth	r3, r3
 800097c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000984:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	899b      	ldrh	r3, [r3, #12]
 800098a:	461a      	mov	r2, r3
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	4313      	orrs	r3, r2
 8000990:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	b29a      	uxth	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe86 	bl	80006b0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <USART_Init+0x168>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d003      	beq.n	80009b4 <USART_Init+0xb4>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <USART_Init+0x16c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d102      	bne.n	80009ba <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	e001      	b.n	80009be <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	899b      	ldrh	r3, [r3, #12]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	da0c      	bge.n	80009e4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	4613      	mov	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	009a      	lsls	r2, r3, #2
 80009d4:	441a      	add	r2, r3
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e0:	61fb      	str	r3, [r7, #28]
 80009e2:	e00b      	b.n	80009fc <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	009a      	lsls	r2, r3, #2
 80009ee:	441a      	add	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <USART_Init+0x170>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	095b      	lsrs	r3, r3, #5
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	091b      	lsrs	r3, r3, #4
 8000a0e:	2264      	movs	r2, #100	; 0x64
 8000a10:	fb02 f303 	mul.w	r3, r2, r3
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	899b      	ldrh	r3, [r3, #12]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da0c      	bge.n	8000a40 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	3332      	adds	r3, #50	; 0x32
 8000a2c:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <USART_Init+0x170>)
 8000a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3e:	e00b      	b.n	8000a58 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	3332      	adds	r3, #50	; 0x32
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <USART_Init+0x170>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	095b      	lsrs	r3, r3, #5
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a54:	4313      	orrs	r3, r2
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	811a      	strh	r2, [r3, #8]
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40011000 	.word	0x40011000
 8000a6c:	40011400 	.word	0x40011400
 8000a70:	51eb851f 	.word	0x51eb851f

08000a74 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d008      	beq.n	8000a98 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	899b      	ldrh	r3, [r3, #12]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a96:	e007      	b.n	8000aa8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	899b      	ldrh	r3, [r3, #12]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	819a      	strh	r2, [r3, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000ac0:	887b      	ldrh	r3, [r7, #2]
 8000ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	809a      	strh	r2, [r3, #4]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	4013      	ands	r3, r2
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e001      	b.n	8000b02 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000b1a:	4909      	ldr	r1, [pc, #36]	; (8000b40 <NVIC_EnableIRQ+0x30>)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	095b      	lsrs	r3, r3, #5
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	f002 021f 	and.w	r2, r2, #31
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <ADC_configure>:
#include <string.h> /* memset */
#include "CircularBuffer.h"
#include "macros_utiles.h"

void ADC_configure()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	// Clock configure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2004      	movs	r0, #4
 8000b4e:	f7ff fe57 	bl	8000800 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);//ADC3 is connected to the APB2 peripheral bus
 8000b52:	2101      	movs	r1, #1
 8000b54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b58:	f7ff fe92 	bl	8000880 <RCC_APB2PeriphClockCmd>

	// GPIO configure
	GPIO_InitTypeDef GPIO_initStruct;
	GPIO_initStruct.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_4;	// GPIOC 4 et 5
 8000b5c:	2330      	movs	r3, #48	; 0x30
 8000b5e:	61bb      	str	r3, [r7, #24]
	GPIO_initStruct.GPIO_Mode = GPIO_Mode_AN;			// mode analogique
 8000b60:	2303      	movs	r3, #3
 8000b62:	773b      	strb	r3, [r7, #28]
	GPIO_initStruct.GPIO_Speed = GPIO_Speed_100MHz; 	// very high speed
 8000b64:	2303      	movs	r3, #3
 8000b66:	777b      	strb	r3, [r7, #29]
	GPIO_initStruct.GPIO_OType = GPIO_OType_PP;			// mode push pull
 8000b68:	2300      	movs	r3, #0
 8000b6a:	77bb      	strb	r3, [r7, #30]
	GPIO_initStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;		// No pull-up, no pull down
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOC, &GPIO_initStruct);
 8000b70:	f107 0318 	add.w	r3, r7, #24
 8000b74:	4619      	mov	r1, r3
 8000b76:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <ADC_configure+0xb0>)
 8000b78:	f7ff fcc2 	bl	8000500 <GPIO_Init>

	// ADC configure
	ADC_InitTypeDef ADC_initStruct;
	memset(&ADC_initStruct, 0, sizeof(ADC_initStruct));							// init a 0 de ADC_initStruct
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2218      	movs	r2, #24
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fc82 	bl	800148c <memset>
	ADC_initStruct.ADC_Resolution = ADC_Resolution_12b;							// valeur sur 12bits
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
	ADC_initStruct.ADC_ScanConvMode = ENABLE;									// lecture sur 2 canaux
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	713b      	strb	r3, [r7, #4]
	ADC_initStruct.ADC_ContinuousConvMode = DISABLE;							// pas de lecture en continue
 8000b90:	2300      	movs	r3, #0
 8000b92:	717b      	strb	r3, [r7, #5]
	ADC_initStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None; 	// pas de trigger pour debut de la lecture
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
	ADC_initStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConvEdge_None;		// pas de signal de trigger
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
	ADC_initStruct.ADC_DataAlign = ADC_DataAlign_Right;							// data alignees a droite
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
	ADC_initStruct.ADC_NbrOfConversion = 2;										// 1conversion / 16 dispos
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_initStruct);
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <ADC_configure+0xb4>)
 8000baa:	f7ff fb0d 	bl	80001c8 <ADC_Init>

	// liaison ADC - GPIO
	ADC_RegularChannelConfig(ADC1,
 8000bae:	2303      	movs	r3, #3
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <ADC_configure+0xb4>)
 8000bb6:	f7ff fb79 	bl	80002ac <ADC_RegularChannelConfig>
							 ADC_Channel_15,	// ADC1 channel 15 = PC5
							 1,
							 ADC_SampleTime_56Cycles);

	// liaison ADC - GPIO
	ADC_RegularChannelConfig(ADC1,
 8000bba:	2303      	movs	r3, #3
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	210e      	movs	r1, #14
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <ADC_configure+0xb4>)
 8000bc2:	f7ff fb73 	bl	80002ac <ADC_RegularChannelConfig>
							 ADC_Channel_14,	// ADC1 channel 14 = PC4
							 2,
							 ADC_SampleTime_56Cycles);

	//interruption a la fin de la conversion
	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f240 2105 	movw	r1, #517	; 0x205
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <ADC_configure+0xb4>)
 8000bce:	f7ff fc54 	bl	800047a <ADC_ITConfig>
	NVIC_EnableIRQ(ADC_IRQn);
 8000bd2:	2012      	movs	r0, #18
 8000bd4:	f7ff ff9c 	bl	8000b10 <NVIC_EnableIRQ>

	ADC1->CR2 |= BIT10; // EOC set apres chaque conversion de la sequence
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <ADC_configure+0xb4>)
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <ADC_configure+0xb4>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be2:	6093      	str	r3, [r2, #8]

	ADC_Cmd(ADC1, ENABLE);	// activer ADC1
 8000be4:	2101      	movs	r1, #1
 8000be6:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <ADC_configure+0xb4>)
 8000be8:	f7ff fb44 	bl	8000274 <ADC_Cmd>
}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	40012000 	.word	0x40012000

08000bfc <ADC_startConversion>:

void ADC_startConversion()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
	ADC_SoftwareStartConv(ADC1);
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <ADC_startConversion+0x48>)
 8000c04:	f7ff fc1c 	bl	8000440 <ADC_SoftwareStartConv>

	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 8000c08:	bf00      	nop
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <ADC_startConversion+0x48>)
 8000c0e:	f7ff fc5d 	bl	80004cc <ADC_GetFlagStatus>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f8      	beq.n	8000c0a <ADC_startConversion+0xe>
	uint16_t adcValueChannel14 = ADC_GetConversionValue(ADC1);
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <ADC_startConversion+0x48>)
 8000c1a:	f7ff fc21 	bl	8000460 <ADC_GetConversionValue>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]

	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 8000c22:	bf00      	nop
 8000c24:	2102      	movs	r1, #2
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <ADC_startConversion+0x48>)
 8000c28:	f7ff fc50 	bl	80004cc <ADC_GetFlagStatus>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f8      	beq.n	8000c24 <ADC_startConversion+0x28>
	uint16_t adcValueChannel15 = ADC_GetConversionValue(ADC1);
 8000c32:	4804      	ldr	r0, [pc, #16]	; (8000c44 <ADC_startConversion+0x48>)
 8000c34:	f7ff fc14 	bl	8000460 <ADC_GetConversionValue>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	80bb      	strh	r3, [r7, #4]

	printf("");

}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40012000 	.word	0x40012000

08000c48 <ADC_IRQHandler>:
{
	// TOD : desactiver conversion en continu
}

void ADC_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	// TODO : traitement
	uint16_t conversion_value = ADC_GetConversionValue(ADC1);
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <ADC_IRQHandler+0x20>)
 8000c50:	f7ff fc06 	bl	8000460 <ADC_GetConversionValue>
 8000c54:	4603      	mov	r3, r0
 8000c56:	80fb      	strh	r3, [r7, #6]
	CBuffer16b_write(conversion_value);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f836 	bl	8000ccc <CBuffer16b_write>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40012000 	.word	0x40012000

08000c6c <CBuffer8b_write>:
#include "CircularBuffer.h"

volatile unsigned int item_in_buffer8b = 0;

int CBuffer8b_write(uint8_t p_data)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	if(item_in_buffer8b >= BUFFER_SIZE) return -1;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <CBuffer8b_write+0x54>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b13      	cmp	r3, #19
 8000c7c:	d902      	bls.n	8000c84 <CBuffer8b_write+0x18>
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e016      	b.n	8000cb2 <CBuffer8b_write+0x46>

	circular_buffer8b[buffer8b_head] = p_data;		// mettre data dans le buffer
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <CBuffer8b_write+0x58>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	490f      	ldr	r1, [pc, #60]	; (8000cc8 <CBuffer8b_write+0x5c>)
 8000c8a:	79fa      	ldrb	r2, [r7, #7]
 8000c8c:	54ca      	strb	r2, [r1, r3]

	buffer8b_head++;								// incrementer pos head
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <CBuffer8b_write+0x58>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <CBuffer8b_write+0x58>)
 8000c96:	6013      	str	r3, [r2, #0]
	item_in_buffer8b++;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <CBuffer8b_write+0x54>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <CBuffer8b_write+0x54>)
 8000ca0:	6013      	str	r3, [r2, #0]

	if(buffer8b_head >= BUFFER_SIZE){				// si tete = ou > que taille buffer
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <CBuffer8b_write+0x58>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b13      	cmp	r3, #19
 8000ca8:	d902      	bls.n	8000cb0 <CBuffer8b_write+0x44>
		buffer8b_head = 0;						// alors retour a 0
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <CBuffer8b_write+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000002c 	.word	0x2000002c
 8000cc4:	20000078 	.word	0x20000078
 8000cc8:	20000060 	.word	0x20000060

08000ccc <CBuffer16b_write>:


volatile unsigned int item_in_buffer16b = 0;

int CBuffer16b_write(uint16_t p_data)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
	if(item_in_buffer16b >= BUFFER_SIZE) return 0;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <CBuffer16b_write+0x54>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b13      	cmp	r3, #19
 8000cdc:	d901      	bls.n	8000ce2 <CBuffer16b_write+0x16>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e017      	b.n	8000d12 <CBuffer16b_write+0x46>

	circular_buffer16b[buffer16b_head] = p_data;		// mettre data dans le buffer
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <CBuffer16b_write+0x58>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4910      	ldr	r1, [pc, #64]	; (8000d28 <CBuffer16b_write+0x5c>)
 8000ce8:	88fa      	ldrh	r2, [r7, #6]
 8000cea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	buffer16b_head++;								// incrementer pos head
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <CBuffer16b_write+0x58>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <CBuffer16b_write+0x58>)
 8000cf6:	6013      	str	r3, [r2, #0]
	item_in_buffer16b++;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <CBuffer16b_write+0x54>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <CBuffer16b_write+0x54>)
 8000d00:	6013      	str	r3, [r2, #0]

	if(buffer16b_head >= BUFFER_SIZE){				// si tete = ou > que taille buffer
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <CBuffer16b_write+0x58>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b13      	cmp	r3, #19
 8000d08:	d902      	bls.n	8000d10 <CBuffer16b_write+0x44>
		buffer16b_head = 0;						// alors retour a 0
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <CBuffer16b_write+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000030 	.word	0x20000030
 8000d24:	20000034 	.word	0x20000034
 8000d28:	20000038 	.word	0x20000038

08000d2c <CBuffer16b_read>:

int CBuffer16b_read(uint16_t* r_data)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(CBuffer16b_isEmpty()) return -1;				// retourne 0 si buffer est vide
 8000d34:	f000 f82a 	bl	8000d8c <CBuffer16b_isEmpty>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <CBuffer16b_read+0x18>
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e018      	b.n	8000d76 <CBuffer16b_read+0x4a>

	*r_data = circular_buffer16b[buffer16b_queue];	// mettre valeur a pos head dans r_data
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <CBuffer16b_read+0x54>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <CBuffer16b_read+0x58>)
 8000d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	801a      	strh	r2, [r3, #0]

	buffer16b_queue++;								// incrementer pos queue
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <CBuffer16b_read+0x54>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3301      	adds	r3, #1
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <CBuffer16b_read+0x54>)
 8000d5a:	6013      	str	r3, [r2, #0]
	item_in_buffer16b--;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <CBuffer16b_read+0x5c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <CBuffer16b_read+0x5c>)
 8000d64:	6013      	str	r3, [r2, #0]

	if(buffer16b_queue >= BUFFER_SIZE){			// si tete = ou > que taille buffer
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <CBuffer16b_read+0x54>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b13      	cmp	r3, #19
 8000d6c:	d902      	bls.n	8000d74 <CBuffer16b_read+0x48>
		buffer16b_queue = 0;						// alors retour a 0
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <CBuffer16b_read+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000007c 	.word	0x2000007c
 8000d84:	20000038 	.word	0x20000038
 8000d88:	20000030 	.word	0x20000030

08000d8c <CBuffer16b_isEmpty>:

int CBuffer16b_isEmpty()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return buffer16b_head == buffer16b_queue;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <CBuffer16b_isEmpty+0x20>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <CBuffer16b_isEmpty+0x24>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	bf0c      	ite	eq
 8000d9c:	2301      	moveq	r3, #1
 8000d9e:	2300      	movne	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000034 	.word	0x20000034
 8000db0:	2000007c 	.word	0x2000007c

08000db4 <NVIC_EnableIRQ>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000dbe:	4909      	ldr	r1, [pc, #36]	; (8000de4 <NVIC_EnableIRQ+0x30>)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	f002 021f 	and.w	r2, r2, #31
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <Timer_configure>:
#include "macros_utiles.h"

#include "ADCReader.h"

void Timer_configure()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	 * f_apb1 = 53.76 MHz
	 * freq_tim = f_APB1 / [(PSC+1)(ARR+1)]
	 * <=> PSC = (f_APB1 / [freq_tim(ARR+1)] - 1
	 */

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2010      	movs	r0, #16
 8000df0:	f7ff fd26 	bl	8000840 <RCC_APB1PeriphClockCmd>

	// Seulement overflow/underflow genere interruption
	TIM6->CR1 |= TIM_CR1_URS;
 8000df4:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <Timer_configure+0x70>)
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <Timer_configure+0x70>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	8013      	strh	r3, [r2, #0]
	TIM6->CR1 |= TIM_CR1_CEN;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <Timer_configure+0x70>)
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <Timer_configure+0x70>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	8013      	strh	r3, [r2, #0]

	TIM6->DIER |= TIM_DIER_UIE;
 8000e14:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <Timer_configure+0x70>)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <Timer_configure+0x70>)
 8000e18:	899b      	ldrh	r3, [r3, #12]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	8193      	strh	r3, [r2, #12]

	TIM6->PSC = 2687;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <Timer_configure+0x70>)
 8000e26:	f640 227f 	movw	r2, #2687	; 0xa7f
 8000e2a:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM6->ARR = 9999;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <Timer_configure+0x70>)
 8000e2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c

	// reinitialise timer et met a jour registre
	TIM6->EGR |= TIM_EGR_UG;
 8000e34:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <Timer_configure+0x70>)
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <Timer_configure+0x70>)
 8000e38:	8a9b      	ldrh	r3, [r3, #20]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	8293      	strh	r3, [r2, #20]
	timer_initStruct.TIM_ClockDivision = TIM_CKD_DIV1;
	timer_initStruct.TIM_RepetitionCounter = ENABLE;				// N.A pour TIM6
	TIM_TimeBaseInit(TIM6, &timer_initStruct);
	*/

	NVIC_EnableIRQ(TIM6_DAC_IRQn);							// active les interruption du timer
 8000e44:	2036      	movs	r0, #54	; 0x36
 8000e46:	f7ff ffb5 	bl	8000db4 <NVIC_EnableIRQ>

	TIM_Cmd(TIM6, ENABLE);
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <Timer_configure+0x70>)
 8000e4e:	f7ff fd37 	bl	80008c0 <TIM_Cmd>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40001000 	.word	0x40001000

08000e5c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	TIM6->SR &= ~TIM_SR_UIF;
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <TIM6_DAC_IRQHandler+0x1c>)
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <TIM6_DAC_IRQHandler+0x1c>)
 8000e64:	8a1b      	ldrh	r3, [r3, #16]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	8213      	strh	r3, [r2, #16]

	ADC_startConversion();
 8000e70:	f7ff fec4 	bl	8000bfc <ADC_startConversion>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40001000 	.word	0x40001000

08000e7c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09a      	sub	sp, #104	; 0x68
 8000e80:	af00      	add	r7, sp, #0
  Timer_configure();
 8000e82:	f7ff ffb1 	bl	8000de8 <Timer_configure>
  ADC_configure();
 8000e86:	f7ff fe5d 	bl	8000b44 <ADC_configure>
  uart_configure();
 8000e8a:	f000 fa3d 	bl	8001308 <uart_configure>

  char str[100];
  strcpy(str, "hello\n");
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <main+0x50>)
 8000e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e96:	6018      	str	r0, [r3, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	8019      	strh	r1, [r3, #0]
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	0c0a      	lsrs	r2, r1, #16
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  while (1){

	  //uart_sendString(str);

	  if(!CBuffer16b_isEmpty()){
 8000ea2:	f7ff ff73 	bl	8000d8c <CBuffer16b_isEmpty>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1fa      	bne.n	8000ea2 <main+0x26>

		  CBuffer16b_read( (uint16_t*)&value );
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff3c 	bl	8000d2c <CBuffer16b_read>
		  sprintf(str, "%i\n", value);
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4905      	ldr	r1, [pc, #20]	; (8000ed0 <main+0x54>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f9f3 	bl	80012a8 <siprintf>

		  uart_sendString(str);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fa9b 	bl	8001400 <uart_sendString>
	  if(!CBuffer16b_isEmpty()){
 8000eca:	e7ea      	b.n	8000ea2 <main+0x26>
 8000ecc:	080014b4 	.word	0x080014b4
 8000ed0:	080014bc 	.word	0x080014bc

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eda:	e003      	b.n	8000ee4 <LoopCopyDataInit>

08000edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ee2:	3104      	adds	r1, #4

08000ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eec:	d3f6      	bcc.n	8000edc <CopyDataInit>
  ldr  r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef0:	e002      	b.n	8000ef8 <LoopFillZerobss>

08000ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef4:	f842 3b04 	str.w	r3, [r2], #4

08000ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000efc:	d3f9      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efe:	f000 f841 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f000 fa9f 	bl	8001444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff ffb9 	bl	8000e7c <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f10:	080014c8 	.word	0x080014c8
  ldr  r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f18:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000f1c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000f20:	20000080 	.word	0x20000080

08000f24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <CAN1_RX0_IRQHandler>

08000f26 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <MemManage_Handler+0x4>

08000f40 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <BusFault_Handler+0x4>

08000f46 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <UsageFault_Handler+0x4>

08000f4c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <SystemInit+0x60>)
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <SystemInit+0x60>)
 8000f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <SystemInit+0x64>)
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <SystemInit+0x64>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <SystemInit+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <SystemInit+0x64>)
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <SystemInit+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <SystemInit+0x64>)
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <SystemInit+0x68>)
 8000fbe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <SystemInit+0x64>)
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <SystemInit+0x64>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000fd2:	f000 f80d 	bl	8000ff0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <SystemInit+0x60>)
 8000fd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fdc:	609a      	str	r2, [r3, #8]
#endif
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	24003010 	.word	0x24003010

08000ff0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ffe:	4a36      	ldr	r2, [pc, #216]	; (80010d8 <SetSysClock+0xe8>)
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <SetSysClock+0xe8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <SetSysClock+0xe8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3301      	adds	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d103      	bne.n	8001028 <SetSysClock+0x38>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001026:	d1f0      	bne.n	800100a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <SetSysClock+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001034:	2301      	movs	r3, #1
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	e001      	b.n	800103e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d142      	bne.n	80010ca <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <SetSysClock+0xe8>)
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <SetSysClock+0xe8>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001050:	4a22      	ldr	r2, [pc, #136]	; (80010dc <SetSysClock+0xec>)
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <SetSysClock+0xec>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <SetSysClock+0xe8>)
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <SetSysClock+0xe8>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <SetSysClock+0xe8>)
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <SetSysClock+0xe8>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <SetSysClock+0xe8>)
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <SetSysClock+0xe8>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800107a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <SetSysClock+0xe8>)
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <SetSysClock+0xf0>)
 8001080:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <SetSysClock+0xe8>)
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <SetSysClock+0xe8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800108e:	bf00      	nop
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <SetSysClock+0xe8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f9      	beq.n	8001090 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <SetSysClock+0xf4>)
 800109e:	f240 7205 	movw	r2, #1797	; 0x705
 80010a2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <SetSysClock+0xe8>)
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <SetSysClock+0xe8>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f023 0303 	bic.w	r3, r3, #3
 80010ae:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <SetSysClock+0xe8>)
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <SetSysClock+0xe8>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80010bc:	bf00      	nop
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SetSysClock+0xe8>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d1f9      	bne.n	80010be <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000
 80010e0:	07405419 	.word	0x07405419
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80010f8:	e004      	b.n	8001104 <ts_itoa+0x1c>
		div *= base;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	fbb2 f2f3 	udiv	r2, r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	d2f3      	bcs.n	80010fa <ts_itoa+0x12>

	while (div != 0)
 8001112:	e029      	b.n	8001168 <ts_itoa+0x80>
	{
		int num = d/div;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	fbb2 f3f3 	udiv	r3, r2, r3
 800111c:	613b      	str	r3, [r7, #16]
		d = d%div;
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	fbb3 f1f2 	udiv	r1, r3, r2
 8001126:	fb02 f201 	mul.w	r2, r2, r1
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
		div /= base;
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	fb92 f3f3 	sdiv	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b09      	cmp	r3, #9
 800113c:	dd0a      	ble.n	8001154 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	1c59      	adds	r1, r3, #1
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	6011      	str	r1, [r2, #0]
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	3237      	adds	r2, #55	; 0x37
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e009      	b.n	8001168 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	6011      	str	r1, [r2, #0]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	3230      	adds	r2, #48	; 0x30
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1d2      	bne.n	8001114 <ts_itoa+0x2c>
	}
}
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b088      	sub	sp, #32
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800118a:	e07d      	b.n	8001288 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b25      	cmp	r3, #37	; 0x25
 8001192:	d171      	bne.n	8001278 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3301      	adds	r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d01e      	beq.n	80011e0 <ts_formatstring+0x66>
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	dc06      	bgt.n	80011b4 <ts_formatstring+0x3a>
 80011a6:	2b58      	cmp	r3, #88	; 0x58
 80011a8:	d050      	beq.n	800124c <ts_formatstring+0xd2>
 80011aa:	2b63      	cmp	r3, #99	; 0x63
 80011ac:	d00e      	beq.n	80011cc <ts_formatstring+0x52>
 80011ae:	2b25      	cmp	r3, #37	; 0x25
 80011b0:	d058      	beq.n	8001264 <ts_formatstring+0xea>
 80011b2:	e05d      	b.n	8001270 <ts_formatstring+0xf6>
 80011b4:	2b73      	cmp	r3, #115	; 0x73
 80011b6:	d02b      	beq.n	8001210 <ts_formatstring+0x96>
 80011b8:	2b73      	cmp	r3, #115	; 0x73
 80011ba:	dc02      	bgt.n	80011c2 <ts_formatstring+0x48>
 80011bc:	2b69      	cmp	r3, #105	; 0x69
 80011be:	d00f      	beq.n	80011e0 <ts_formatstring+0x66>
 80011c0:	e056      	b.n	8001270 <ts_formatstring+0xf6>
 80011c2:	2b75      	cmp	r3, #117	; 0x75
 80011c4:	d037      	beq.n	8001236 <ts_formatstring+0xbc>
 80011c6:	2b78      	cmp	r3, #120	; 0x78
 80011c8:	d040      	beq.n	800124c <ts_formatstring+0xd2>
 80011ca:	e051      	b.n	8001270 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60fa      	str	r2, [r7, #12]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	1d11      	adds	r1, r2, #4
 80011d6:	6079      	str	r1, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]
				break;
 80011de:	e047      	b.n	8001270 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1d1a      	adds	r2, r3, #4
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da07      	bge.n	8001200 <ts_formatstring+0x86>
					{
						val *= -1;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	425b      	negs	r3, r3
 80011f4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	60fa      	str	r2, [r7, #12]
 80011fc:	222d      	movs	r2, #45	; 0x2d
 80011fe:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001200:	69f9      	ldr	r1, [r7, #28]
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	220a      	movs	r2, #10
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff6d 	bl	80010e8 <ts_itoa>
				}
				break;
 800120e:	e02f      	b.n	8001270 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1d1a      	adds	r2, r3, #4
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800121a:	e007      	b.n	800122c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60fa      	str	r2, [r7, #12]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	1c51      	adds	r1, r2, #1
 8001226:	61b9      	str	r1, [r7, #24]
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f3      	bne.n	800121c <ts_formatstring+0xa2>
					}
				}
				break;
 8001234:	e01c      	b.n	8001270 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	6819      	ldr	r1, [r3, #0]
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	220a      	movs	r2, #10
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff4f 	bl	80010e8 <ts_itoa>
				break;
 800124a:	e011      	b.n	8001270 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1d1a      	adds	r2, r3, #4
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2210      	movs	r2, #16
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff43 	bl	80010e8 <ts_itoa>
				break;
 8001262:	e005      	b.n	8001270 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	60fa      	str	r2, [r7, #12]
 800126a:	2225      	movs	r2, #37	; 0x25
 800126c:	701a      	strb	r2, [r3, #0]
				  break;
 800126e:	bf00      	nop
			}
			fmt++;
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3301      	adds	r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	e007      	b.n	8001288 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60fa      	str	r2, [r7, #12]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	1c51      	adds	r1, r2, #1
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f47f af7d 	bne.w	800118c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	461a      	mov	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80012a8:	b40e      	push	{r1, r2, r3}
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	69f9      	ldr	r1, [r7, #28]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff5c 	bl	800117a <ts_formatstring>
 80012c2:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80012c4:	68fb      	ldr	r3, [r7, #12]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d0:	b003      	add	sp, #12
 80012d2:	4770      	bx	lr

080012d4 <NVIC_EnableIRQ>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80012de:	4909      	ldr	r1, [pc, #36]	; (8001304 <NVIC_EnableIRQ+0x30>)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	f002 021f 	and.w	r2, r2, #31
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <uart_configure>:
#include "macros_utiles.h"
#include "uart.h"
#include "CircularBuffer.h"

 void  uart_configure()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
	  RCC->APB2ENR |= BIT4; // activer la clock pour le uart1
 800130e:	4a2c      	ldr	r2, [pc, #176]	; (80013c0 <uart_configure+0xb8>)
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <uart_configure+0xb8>)
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
	  RCC->AHB1ENR |= BIT1; // GPIOB enable
 800131a:	4a29      	ldr	r2, [pc, #164]	; (80013c0 <uart_configure+0xb8>)
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <uart_configure+0xb8>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30

	  GPIO_InitTypeDef gpioInitStruct;
	  memset(&gpioInitStruct, 0, sizeof(gpioInitStruct));
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	2208      	movs	r2, #8
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f8ac 	bl	800148c <memset>
	  gpioInitStruct.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6;	// PB7 : Rx, PB6 : Tx
 8001334:	23c0      	movs	r3, #192	; 0xc0
 8001336:	613b      	str	r3, [r7, #16]
	  gpioInitStruct.GPIO_Mode = GPIO_Mode_AF;				// alternate function
 8001338:	2302      	movs	r3, #2
 800133a:	753b      	strb	r3, [r7, #20]
	  gpioInitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// very high speed
 800133c:	2303      	movs	r3, #3
 800133e:	757b      	strb	r3, [r7, #21]
	  gpioInitStruct.GPIO_OType = GPIO_OType_PP;			// push pull
 8001340:	2300      	movs	r3, #0
 8001342:	75bb      	strb	r3, [r7, #22]
	  gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;				// pull up
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
	  GPIO_Init(GPIOB, &gpioInitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <uart_configure+0xbc>)
 8001350:	f7ff f8d6 	bl	8000500 <GPIO_Init>

	  GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);		// bind PB7 to AF - usart1
 8001354:	2207      	movs	r2, #7
 8001356:	2107      	movs	r1, #7
 8001358:	481a      	ldr	r0, [pc, #104]	; (80013c4 <uart_configure+0xbc>)
 800135a:	f7ff f95f 	bl	800061c <GPIO_PinAFConfig>
	  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);		// bind PB6 to AF - usart1
 800135e:	2207      	movs	r2, #7
 8001360:	2106      	movs	r1, #6
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <uart_configure+0xbc>)
 8001364:	f7ff f95a 	bl	800061c <GPIO_PinAFConfig>

	  USART_InitTypeDef usartInitStruct;
	  memset(&usartInitStruct, 0, sizeof(usartInitStruct));
 8001368:	463b      	mov	r3, r7
 800136a:	2210      	movs	r2, #16
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f88c 	bl	800148c <memset>
	  usartInitStruct.USART_BaudRate = 19200;										// baudrate = 19200
 8001374:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001378:	603b      	str	r3, [r7, #0]
	  usartInitStruct.USART_WordLength = USART_WordLength_8b;						// send 8 bits
 800137a:	2300      	movs	r3, #0
 800137c:	80bb      	strh	r3, [r7, #4]
	  usartInitStruct.USART_StopBits = USART_StopBits_1;							// stopbit 1
 800137e:	2300      	movs	r3, #0
 8001380:	80fb      	strh	r3, [r7, #6]
	  usartInitStruct.USART_Parity = USART_Parity_No;								// no parity
 8001382:	2300      	movs	r3, #0
 8001384:	813b      	strh	r3, [r7, #8]
	  usartInitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;					// receive + transmit
 8001386:	230c      	movs	r3, #12
 8001388:	817b      	strh	r3, [r7, #10]
	  usartInitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;	// no cts / rts
 800138a:	2300      	movs	r3, #0
 800138c:	81bb      	strh	r3, [r7, #12]
	  USART_Init(USART1, &usartInitStruct);
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <uart_configure+0xc0>)
 8001394:	f7ff fab4 	bl	8000900 <USART_Init>

	  // enable uart interrupt
	  USART1->CR1 |= BIT5;
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <uart_configure+0xc0>)
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <uart_configure+0xc0>)
 800139c:	899b      	ldrh	r3, [r3, #12]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	8193      	strh	r3, [r2, #12]
	  NVIC_EnableIRQ(USART1_IRQn);
 80013a8:	2025      	movs	r0, #37	; 0x25
 80013aa:	f7ff ff93 	bl	80012d4 <NVIC_EnableIRQ>

	  USART_Cmd(USART1, ENABLE);	// enable usart (UE = 1)
 80013ae:	2101      	movs	r1, #1
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <uart_configure+0xc0>)
 80013b2:	f7ff fb5f 	bl	8000a74 <USART_Cmd>

	  //USART1->CR1  |= BIT13; 				// enable usart (UE = 1)
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40011000 	.word	0x40011000

080013cc <USART1_IRQHandler>:

 void USART1_IRQHandler()
 {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	 if( !(USART1->SR & USART_SR_RXNE) ) return;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <USART1_IRQHandler+0x30>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <USART1_IRQHandler+0x26>

	 char data = (char) USART1->DR;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <USART1_IRQHandler+0x30>)
 80013e2:	889b      	ldrh	r3, [r3, #4]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	71fb      	strb	r3, [r7, #7]
	 CBuffer8b_write(data);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fc3e 	bl	8000c6c <CBuffer8b_write>
 80013f0:	e000      	b.n	80013f4 <USART1_IRQHandler+0x28>
	 if( !(USART1->SR & USART_SR_RXNE) ) return;
 80013f2:	bf00      	nop
 }
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40011000 	.word	0x40011000

08001400 <uart_sendString>:

int uart_sendString(char* p_str)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while(*p_str != '\0'){
 8001408:	e011      	b.n	800142e <uart_sendString+0x2e>
		USART_SendData(USART1, (uint16_t)*p_str);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4619      	mov	r1, r3
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <uart_sendString+0x40>)
 8001414:	f7ff fb4e 	bl	8000ab4 <USART_SendData>
		while( USART_GetFlagStatus(USART1, USART_FLAG_TC) != SET );
 8001418:	bf00      	nop
 800141a:	2140      	movs	r1, #64	; 0x40
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <uart_sendString+0x40>)
 800141e:	f7ff fb5b 	bl	8000ad8 <USART_GetFlagStatus>
 8001422:	4603      	mov	r3, r0
 8001424:	2b01      	cmp	r3, #1
 8001426:	d1f8      	bne.n	800141a <uart_sendString+0x1a>

		p_str++;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3301      	adds	r3, #1
 800142c:	607b      	str	r3, [r7, #4]
	while(*p_str != '\0'){
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e9      	bne.n	800140a <uart_sendString+0xa>
	}

	return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40011000 	.word	0x40011000

08001444 <__libc_init_array>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	4e0d      	ldr	r6, [pc, #52]	; (800147c <__libc_init_array+0x38>)
 8001448:	4c0d      	ldr	r4, [pc, #52]	; (8001480 <__libc_init_array+0x3c>)
 800144a:	1ba4      	subs	r4, r4, r6
 800144c:	10a4      	asrs	r4, r4, #2
 800144e:	2500      	movs	r5, #0
 8001450:	42a5      	cmp	r5, r4
 8001452:	d109      	bne.n	8001468 <__libc_init_array+0x24>
 8001454:	4e0b      	ldr	r6, [pc, #44]	; (8001484 <__libc_init_array+0x40>)
 8001456:	4c0c      	ldr	r4, [pc, #48]	; (8001488 <__libc_init_array+0x44>)
 8001458:	f000 f820 	bl	800149c <_init>
 800145c:	1ba4      	subs	r4, r4, r6
 800145e:	10a4      	asrs	r4, r4, #2
 8001460:	2500      	movs	r5, #0
 8001462:	42a5      	cmp	r5, r4
 8001464:	d105      	bne.n	8001472 <__libc_init_array+0x2e>
 8001466:	bd70      	pop	{r4, r5, r6, pc}
 8001468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800146c:	4798      	blx	r3
 800146e:	3501      	adds	r5, #1
 8001470:	e7ee      	b.n	8001450 <__libc_init_array+0xc>
 8001472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001476:	4798      	blx	r3
 8001478:	3501      	adds	r5, #1
 800147a:	e7f2      	b.n	8001462 <__libc_init_array+0x1e>
 800147c:	080014c0 	.word	0x080014c0
 8001480:	080014c0 	.word	0x080014c0
 8001484:	080014c0 	.word	0x080014c0
 8001488:	080014c4 	.word	0x080014c4

0800148c <memset>:
 800148c:	4402      	add	r2, r0
 800148e:	4603      	mov	r3, r0
 8001490:	4293      	cmp	r3, r2
 8001492:	d100      	bne.n	8001496 <memset+0xa>
 8001494:	4770      	bx	lr
 8001496:	f803 1b01 	strb.w	r1, [r3], #1
 800149a:	e7f9      	b.n	8001490 <memset+0x4>

0800149c <_init>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	bf00      	nop
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr

080014a8 <_fini>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr
